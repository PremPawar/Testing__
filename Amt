'use strict';

const platformClient = require('purecloud-platform-client-v2');
const functions = require('firebase-functions');
const dialogflow = require('dialogflow');

// Initialize PureCloud API client
const client = platformClient.ApiClient.instance;

// Set environment base path (replace with your specific Genesys Cloud region)
client.setEnvironment(platformClient.PureCloudRegionHosts.us_east_1);

async function loginClientCredentialsGrant(CId, CSecret) {
  try {
    await client.loginClientCredentialsGrant(CId, CSecret);
    console.log('Authentication Successful');
  } catch (err) {
    console.error('Authentication Error:', err);
  }
}

let apiInstance = new platformClient.ArchitectApi();
let integrationApis = new platformClient.IntegrationsApi();

exports.gdfivr = async (req, res) => {
  const tag = req.body.fulfillmentInfo.tag;
  let sessionParameters = {};

  if (tag === "DnisPrompt") {
    const datatableId = "6c98b9ad038a";
    const rowId = "MainPrompt";
    const opts = { 'showbrief': false };

    try {
      const result = await apiInstance.getFlowsDatatableRow(datatableId, rowId, opts);

      sessionParameters.MessageType = result['MsgType'];
      MaintainOrGenMsg = result['MaintainOrGenMsg'];
      console.log('MaintainOrGenMsg', MaintainOrGenMsg);

      if (MaintainOrGenMsg === "M-Y" || MaintainOrGenMsg === "G-Y") {
        const promptName = result['PromptNameMainOrGenMsg'];
        sessionParameters.isMainOrGenMsgPresent = "True";
        sessionParameters.MaintainOrGenMsgPrompt = "urn:genesys:userprompt:" + promptName;
      } else {
        sessionParameters.isMainOrGenMsgPresent = "False";
        sessionParameters.MaintainOrGenMsgPrompt = "urn:genesys:userprompt:silent1ms";
      }

      const ani = req.body.sessionInfo.parameters.ANI;
      const actionId_ANIMatch = "fb987ae65e9e";
      const body = { ani, env: 'accp' };

      let ssnViaAni;
      let aniMatch;
      let fName;

      try {
        const aniaction = await integrationApis.postIntegrationsActionExecute(actionId_ANIMatch, body);
        if (aniaction.status === "success") {
          sessionParameters.aniMatch = "Y";
          sessionParameters.ssnViaAni = aniaction.ssn;
        } else {
          sessionParameters.aniMatch = "N";
        }
        console.log("firstPlace", sessionParameters);
      } catch (err) {
        console.error('Error calling postIntegrationsActionExecute (ANI):', err);
      }

      if (sessionParameters.ssnViaAni) {
        const ssn_body = {
          enteredIdentifier: sessionParameters.ssnViaAni,
          identifierType: 'SSN',
          clientID: 'INGWIN',
          sourceApp: 'IVR',
          env: 'accp'
        };
        const actionId_SSNAction = "6945ffd7afe4";

        try {
          const ssnaction = await integrationApis.postIntegrationsActionExecute(actionId_SSNAction, ssn_body);
          if (ssnaction.status === "success" && ssnaction.fname) {
            sessionParameters.fName = ssnaction.fname;
          }
          console.log("forthPlace", sessionParameters);
        } catch (err) {
          console.error('Error calling postIntegrationsActionExecute (SSN):', err);
        }
      }
    } catch (err) {
      console.error('Error getting datatable row:', err);
    }

    const response = {
      sessionInfo: {
        parameters: {
          ...sessionParameters
        },
      }
    };
    res.status(200).send(response);
    console.log('DF Req body 1: ' + JSON.stringify(req.body));
  } else if (tag === "DnisBasedPrompt") {
    const dnis = req.body.sessionInfo.parameters.d
