const DropdownRow = ({ rowIndex, selectedValue, onSelectionChange }) => {
  const options = getOptionsBasedOnValue(selectedValue);

  return (
    <div className="flex space-x-4">
      <select
        value={selectedValue}
        onChange={(e) => onSelectionChange(rowIndex, e.target.value)}
        className="border p-2"
      >
        {options.map((option, index) => (
          <option key={index} value={option}>
            {option}
          </option>
        ))}
      </select>
    </div>
  );
};





const [rows, setRows] = useState([{ selectedValue: '' }]);

  const getOptionsBasedOnValue = (selectedValue) => {
    // Replace this with your logic to fetch options based on the selected value
    // For example, you can use an API call or a predefined mapping
    // For demonstration purposes, let's return some static options
    if (selectedValue === 'Option 1') {
      return ['Option 1.1', 'Option 1.2', 'Option 1.3'];
    } else if (selectedValue === 'Option 2') {
      return ['Option 2.1', 'Option 2.2', 'Option 2.3'];
    } else {
      return [];
    }
  };

  const handleSelectionChange = (rowIndex, value) => {
    const updatedRows = [...rows];
    updatedRows[rowIndex].selectedValue = value;
    if (rowIndex === updatedRows.length - 1) {
      updatedRows.push({ selectedValue: '' });
    }
    setRows(updatedRows);
  };





<div>
      {rows.map((row, index) => (
        <DropdownRow
          key={index}
          rowIndex={index}
          selectedValue={row.selectedValue}
          onSelectionChange={handleSelectionChange}
        />
      ))}
    </div>
